<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Humanoid Shadowing and Imitation from Humans文章解读</title>
    <link href="/tech-blog/2025/03/23/humanPlus/"/>
    <url>/tech-blog/2025/03/23/humanPlus/</url>
    
    <content type="html"><![CDATA[<p><a href="https://humanoid-ai.github.io/">主页</a></p>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
      <category>AI</category>
      
      <category>Robotics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>Research</tag>
      
      <tag>Robotics</tag>
      
      <tag>ComputerVision</tag>
      
      <tag>NLP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UMI In-The-Wild Robot Teaching Without In-The-Wild Robots文章解读</title>
    <link href="/tech-blog/2025/03/23/UMI/"/>
    <url>/tech-blog/2025/03/23/UMI/</url>
    
    <content type="html"><![CDATA[<p><a href="https://umi-gripper.github.io/">主页</a></p>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
      <category>AI</category>
      
      <category>Robotics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>Research</tag>
      
      <tag>Robotics</tag>
      
      <tag>ComputerVision</tag>
      
      <tag>NLP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenVLA：开源视觉-语言-动作模型解读</title>
    <link href="/tech-blog/2025/03/23/openvla/"/>
    <url>/tech-blog/2025/03/23/openvla/</url>
    
    <content type="html"><![CDATA[<h1 id="OpenVLA-An-Open-Source-Vision-Language-Action-Model论文解读"><a href="#OpenVLA-An-Open-Source-Vision-Language-Action-Model论文解读" class="headerlink" title="OpenVLA: An Open-Source Vision-Language-Action Model论文解读"></a>OpenVLA: An Open-Source Vision-Language-Action Model论文解读</h1><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li>项目主页: <a href="https://openvla.github.io/">OpenVLA</a></li><li>代码仓库: <a href="https://github.com/openvla/openvla">GitHub - OpenVLA</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
      <category>AI</category>
      
      <category>Robotics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>Research</tag>
      
      <tag>Robotics</tag>
      
      <tag>ComputerVision</tag>
      
      <tag>NLP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Do As I Can, Not As I Say: Grounding Language in Robotic Affordances解读</title>
    <link href="/tech-blog/2025/03/23/saycan/"/>
    <url>/tech-blog/2025/03/23/saycan/</url>
    
    <content type="html"><![CDATA[<h1 id="Do-As-I-Can-Not-As-I-Say-Grounding-Language-in-Robotic-Affordances"><a href="#Do-As-I-Can-Not-As-I-Say-Grounding-Language-in-Robotic-Affordances" class="headerlink" title="Do As I Can, Not As I Say: Grounding Language in Robotic Affordances"></a>Do As I Can, Not As I Say: Grounding Language in Robotic Affordances</h1><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://say-can.github.io/">项目主页</a></li><li><a href="https://github.com/google-research/google-research/blob/master/saycan/SayCan-Robot-Pick-Place.ipynb">代码示例</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
      <category>AI</category>
      
      <category>Robotics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>Research</tag>
      
      <tag>Robotics</tag>
      
      <tag>ComputerVision</tag>
      
      <tag>NLP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RDT-1B：双手操作的扩散基础模型解读</title>
    <link href="/tech-blog/2025/03/22/RDT%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/"/>
    <url>/tech-blog/2025/03/22/RDT%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="RDT-1B-A-DIFFUSION-FOUNDATION-MODEL-FOR-BIMANUAL-MANIPULATION"><a href="#RDT-1B-A-DIFFUSION-FOUNDATION-MODEL-FOR-BIMANUAL-MANIPULATION" class="headerlink" title="RDT-1B: A DIFFUSION FOUNDATION MODEL FOR BIMANUAL MANIPULATION"></a>RDT-1B: A DIFFUSION FOUNDATION MODEL FOR BIMANUAL MANIPULATION</h1><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p><a href="https://arxiv.org/pdf/2410.07864">RDT-1B: A Diffusion Foundation Model for Bimanual Manipulation</a></p>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
      <category>AI</category>
      
      <category>Robotics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>Research</tag>
      
      <tag>Robotics</tag>
      
      <tag>DiffusionModels</tag>
      
      <tag>ComputerVision</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何找到研究切入点：从文献到创新</title>
    <link href="/tech-blog/2025/03/22/%E5%A6%82%E4%BD%95%E6%89%BE%E7%A0%94%E7%A9%B6%E7%82%B9/"/>
    <url>/tech-blog/2025/03/22/%E5%A6%82%E4%BD%95%E6%89%BE%E7%A0%94%E7%A9%B6%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="如何切入研究点"><a href="#如何切入研究点" class="headerlink" title="如何切入研究点"></a>如何切入研究点</h1><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
      <category>Academic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Research</tag>
      
      <tag>AcademicSkills</tag>
      
      <tag>ResearchMethodology</tag>
      
      <tag>Innovation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何高效阅读和理解学术论文</title>
    <link href="/tech-blog/2025/03/22/%E5%A6%82%E4%BD%95%E8%AF%BB%E8%AE%BA%E6%96%87/"/>
    <url>/tech-blog/2025/03/22/%E5%A6%82%E4%BD%95%E8%AF%BB%E8%AE%BA%E6%96%87/</url>
    
    <content type="html"><![CDATA[<h1 id="如何高效阅读和理解学术论文"><a href="#如何高效阅读和理解学术论文" class="headerlink" title="如何高效阅读和理解学术论文"></a>如何高效阅读和理解学术论文</h1><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
      <category>Academic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Research</tag>
      
      <tag>AcademicSkills</tag>
      
      <tag>PaperReading</tag>
      
      <tag>Methodology</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/tech-blog/2025/03/22/lapa/"/>
    <url>/tech-blog/2025/03/22/lapa/</url>
    
    <content type="html"><![CDATA[<p>LAPA: Latent Action Pretraining from Videos文章解读</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>灵巧手：UniDexGrasp论文解读</title>
    <link href="/tech-blog/2025/03/22/UniDexGrasp/"/>
    <url>/tech-blog/2025/03/22/UniDexGrasp/</url>
    
    <content type="html"><![CDATA[<h1 id="UniDexGrasp-统一框架下的机器人灵巧抓取"><a href="#UniDexGrasp-统一框架下的机器人灵巧抓取" class="headerlink" title="UniDexGrasp: 统一框架下的机器人灵巧抓取"></a>UniDexGrasp: 统一框架下的机器人灵巧抓取</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>机器人灵巧抓取是机器人学和人工智能领域的重要研究方向。本文将详细解读UniDexGrasp论文，这是一个面向多样化物体的统一灵巧抓取框架。UniDexGrasp通过结合视觉感知、触觉反馈和强化学习，实现了对未知物体的鲁棒抓取能力，大幅提升了机器人在复杂环境中的操作能力。</p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在现实世界的应用中，机器人需要能够处理形状、大小和材质各异的物体。传统的抓取方法往往针对特定场景进行设计，难以泛化到新的物体和环境中。UniDexGrasp提出了一种统一的框架，旨在解决这一挑战。</p><h2 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h2><h3 id="1-视觉-触觉融合感知"><a href="#1-视觉-触觉融合感知" class="headerlink" title="1. 视觉-触觉融合感知"></a>1. 视觉-触觉融合感知</h3><p>UniDexGrasp采用了多模态感知系统，包括：</p><ul><li><strong>RGB-D相机</strong>：捕获物体的几何形状和外观特征</li><li><strong>触觉传感器</strong>：获取接触力和滑动信息</li><li><strong>自监督特征提取</strong>：无需人工标注的特征学习</li></ul><p>这种融合方式使机器人能够像人类一样，同时利用视觉和触觉信息指导抓取动作。</p><h3 id="2-层次化强化学习"><a href="#2-层次化强化学习" class="headerlink" title="2. 层次化强化学习"></a>2. 层次化强化学习</h3><p>框架采用了层次化的强化学习结构：</p><ul><li><strong>高层策略</strong>：决定整体抓取姿态和方法</li><li><strong>中层策略</strong>：控制手指运动顺序和协调</li><li><strong>低层控制器</strong>：精确控制关节力矩和位置</li></ul><p>这种分层设计大大降低了学习难度，加速了训练过程。</p><h3 id="3-模拟到现实迁移"><a href="#3-模拟到现实迁移" class="headerlink" title="3. 模拟到现实迁移"></a>3. 模拟到现实迁移</h3><p>为解决sim2real问题，UniDexGrasp采用了：</p><ul><li><strong>域随机化</strong>：在模拟中随机化物理参数和视觉特征</li><li><strong>渐进式学习</strong>：从简单任务到复杂任务的课程学习</li><li><strong>现实世界微调</strong>：通过少量真实世界样本进行适应</li></ul><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>论文在多个基准测试和真实机器人上进行了评估：</p><ul><li>在YCB物体集上达到了92%的抓取成功率</li><li>对未见过的物体达到了85%的泛化成功率</li><li>在不同光照和杂乱环境中展现了鲁棒性</li></ul><h2 id="与现有方法的比较"><a href="#与现有方法的比较" class="headerlink" title="与现有方法的比较"></a>与现有方法的比较</h2><p>与现有的方法相比，UniDexGrasp在以下方面显示出优势：</p><table><thead><tr><th>方法</th><th>成功率</th><th>泛化能力</th><th>计算效率</th></tr></thead><tbody><tr><td>DexNet</td><td>85%</td><td>中等</td><td>高</td></tr><tr><td>DexPilot</td><td>88%</td><td>高</td><td>低</td></tr><tr><td>UniDexGrasp</td><td>92%</td><td>高</td><td>中等</td></tr></tbody></table><h2 id="局限性与未来工作"><a href="#局限性与未来工作" class="headerlink" title="局限性与未来工作"></a>局限性与未来工作</h2><p>尽管UniDexGrasp取得了显著成果，但仍存在一些局限性：</p><ol><li>对极细或极软物体的处理能力有限</li><li>实时性在复杂场景中仍有提升空间</li><li>多物体交互场景下的表现需要改进</li></ol><p>未来工作将聚焦于：</p><ul><li>集成语言模型指导复杂操作</li><li>增强物理推理能力</li><li>改进在低资源环境中的适应性</li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>UniDexGrasp代表了机器人灵巧抓取领域的重要进展，为通用机器人操纵提供了有效解决方案。通过统一的框架整合多模态感知和层次化学习，该方法展现了强大的性能和泛化能力。随着技术的进一步发展，我们有望看到更加智能和灵活的机器人系统在工业和家庭环境中的广泛应用。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li>Andrychowicz, M., et al. (2020). Learning dexterous in-hand manipulation. The International Journal of Robotics Research.</li><li>Levine, S., et al. (2018). Learning hand-eye coordination for robotic grasping with deep learning and large-scale data collection. The International Journal of Robotics Research.</li><li>OpenAI, et al. (2019). Solving Rubik’s Cube with a Robot Hand. arXiv preprint arXiv:1910.07113.</li><li>Kalashnikov, D., et al. (2018). Qt-opt: Scalable deep reinforcement learning for vision-based robotic manipulation. Conference on Robot Learning.</li><li>Pinto, L., &amp; Gupta, A. (2016). Supersizing self-supervision: Learning to grasp from 50k tries and 700 robot hours. IEEE International Conference on Robotics and Automation.</li></ol>]]></content>
    
    
    <categories>
      
      <category>DeepLearning</category>
      
      <category>AI</category>
      
      <category>Robotics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DeepLearning</tag>
      
      <tag>AI</tag>
      
      <tag>Robotics</tag>
      
      <tag>Robot</tag>
      
      <tag>Grasping</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAN神经网络</title>
    <link href="/tech-blog/2025/03/14/GAN/"/>
    <url>/tech-blog/2025/03/14/GAN/</url>
    
    <content type="html"><![CDATA[<h1 id="生成对抗网络（GAN）简介"><a href="#生成对抗网络（GAN）简介" class="headerlink" title="生成对抗网络（GAN）简介"></a>生成对抗网络（GAN）简介</h1><p>生成对抗网络（Generative Adversarial Networks，简称GAN）是一种深度学习模型，由Ian Goodfellow和他的同事们于2014年提出。GAN由两个神经网络组成：生成器（Generator）和判别器（Discriminator），这两个网络相互对抗，通过博弈过程来提高彼此的能力。</p><p><img src="https://i.imgur.com/XVKRM4F.png" alt="GAN Architecture"></p><h2 id="GAN的工作原理"><a href="#GAN的工作原理" class="headerlink" title="GAN的工作原理"></a>GAN的工作原理</h2><p>GAN的工作原理可以类比为一个伪造者和一个鉴定专家之间的博弈：</p><ol><li><strong>生成器（伪造者）</strong>：尝试创建看起来真实的数据（如图像）</li><li><strong>判别器（鉴定专家）</strong>：尝试区分真实数据和生成器创建的假数据</li></ol><p>这两个网络在训练过程中相互竞争：</p><ul><li>生成器试图欺骗判别器，创建越来越逼真的假数据</li><li>判别器试图变得更加精明，更好地区分真假数据</li></ul><p>随着训练的进行，两个网络都会不断改进，最终生成器能够创建非常逼真的数据，而判别器难以区分真假。</p><h2 id="GAN的数学表达"><a href="#GAN的数学表达" class="headerlink" title="GAN的数学表达"></a>GAN的数学表达</h2><p>从数学角度看，GAN的目标函数可以表示为一个极小极大博弈（minimax game）：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">min_G max_D <span class="hljs-built_in">V</span>(D, G) = E_&#123;<span class="hljs-attribute">x</span>~<span class="hljs-built_in">p_data</span>(x)&#125;[log <span class="hljs-built_in">D</span>(x)] + E_&#123;z~<span class="hljs-built_in">p_z</span>(z)&#125;[<span class="hljs-built_in">log</span>(<span class="hljs-number">1</span> - <span class="hljs-built_in">D</span>(<span class="hljs-built_in">G</span>(z)))]<br></code></pre></td></tr></table></figure><p>其中：</p><ul><li>G是生成器网络</li><li>D是判别器网络</li><li>p_data是真实数据分布</li><li>p_z是输入噪声的分布</li><li>D(x)表示判别器认为x是真实数据的概率</li><li>G(z)表示生成器从噪声z生成的数据</li></ul><h2 id="GAN的主要类型"><a href="#GAN的主要类型" class="headerlink" title="GAN的主要类型"></a>GAN的主要类型</h2><p>自2014年以来，GAN已经发展出许多变体，以下是一些最重要的类型：</p><h3 id="1-DCGAN（Deep-Convolutional-GAN）"><a href="#1-DCGAN（Deep-Convolutional-GAN）" class="headerlink" title="1. DCGAN（Deep Convolutional GAN）"></a>1. DCGAN（Deep Convolutional GAN）</h3><p>DCGAN在GAN的基础上使用了卷积神经网络，使其更适合处理图像数据。它引入了一些架构指南，如使用批量归一化、去除全连接层等，大大提高了GAN训练的稳定性。</p><h3 id="2-CGAN（Conditional-GAN）"><a href="#2-CGAN（Conditional-GAN）" class="headerlink" title="2. CGAN（Conditional GAN）"></a>2. CGAN（Conditional GAN）</h3><p>条件GAN通过向生成器和判别器提供额外的条件信息（如类别标签），使模型能够生成特定类别的数据。这使得我们可以控制生成过程，例如生成特定数字的手写体。</p><h3 id="3-CycleGAN"><a href="#3-CycleGAN" class="headerlink" title="3. CycleGAN"></a>3. CycleGAN</h3><p>CycleGAN能够在没有成对训练数据的情况下，学习将图像从一个域转换到另一个域，例如将马变成斑马、夏天变成冬天等。它通过引入循环一致性损失（cycle consistency loss）来实现这一点。</p><h3 id="4-StyleGAN"><a href="#4-StyleGAN" class="headerlink" title="4. StyleGAN"></a>4. StyleGAN</h3><p>StyleGAN引入了一种新的生成器架构，能够在不同的分辨率级别上控制生成图像的风格。它能够生成极其逼真的人脸图像，并允许对不同的面部特征进行精细控制。</p><h2 id="GAN的应用"><a href="#GAN的应用" class="headerlink" title="GAN的应用"></a>GAN的应用</h2><p>GAN已经在多个领域展现出巨大的应用潜力：</p><h3 id="图像生成与编辑"><a href="#图像生成与编辑" class="headerlink" title="图像生成与编辑"></a>图像生成与编辑</h3><ul><li>生成高分辨率、逼真的人脸图像</li><li>图像到图像的转换（如素描转照片）</li><li>图像修复与超分辨率重建</li><li>风格迁移</li></ul><h3 id="数据增强"><a href="#数据增强" class="headerlink" title="数据增强"></a>数据增强</h3><p>GAN可以生成额外的训练数据，帮助解决数据稀缺问题，特别是在医学影像等领域。</p><h3 id="药物发现"><a href="#药物发现" class="headerlink" title="药物发现"></a>药物发现</h3><p>GAN可以用于生成新的分子结构，加速药物发现过程。</p><h3 id="视频生成"><a href="#视频生成" class="headerlink" title="视频生成"></a>视频生成</h3><p>最新的GAN模型能够生成短视频片段，未来可能彻底改变影视制作流程。</p><h2 id="GAN的挑战"><a href="#GAN的挑战" class="headerlink" title="GAN的挑战"></a>GAN的挑战</h2><p>尽管GAN非常强大，但它们也面临一些挑战：</p><ol><li><strong>训练不稳定</strong>：GAN的训练过程可能不稳定，容易出现模式崩溃（mode collapse）等问题</li><li><strong>评估困难</strong>：很难客观地评估GAN的性能</li><li><strong>计算资源需求高</strong>：训练高质量的GAN通常需要大量的计算资源</li><li><strong>伦理问题</strong>：GAN可能被用于生成深度伪造（deepfake）内容，引发隐私和信息真实性问题</li></ol><h2 id="实现一个简单的GAN"><a href="#实现一个简单的GAN" class="headerlink" title="实现一个简单的GAN"></a>实现一个简单的GAN</h2><p>以下是使用PyTorch实现一个简单GAN的代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> torch.optim <span class="hljs-keyword">as</span> optim<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">import</span> torchvision.transforms <span class="hljs-keyword">as</span> transforms<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torchvision.datasets <span class="hljs-keyword">import</span> MNIST<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 设置随机种子，确保结果可复现</span><br>torch.manual_seed(<span class="hljs-number">42</span>)<br><br><span class="hljs-comment"># 设备配置</span><br>device = torch.device(<span class="hljs-string">&#x27;cuda&#x27;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;cpu&#x27;</span>)<br><br><span class="hljs-comment"># 超参数</span><br>batch_size = <span class="hljs-number">64</span><br>z_dimension = <span class="hljs-number">100</span><br>learning_rate = <span class="hljs-number">0.0002</span><br>num_epochs = <span class="hljs-number">50</span><br><br><span class="hljs-comment"># 数据加载和预处理</span><br>transform = transforms.Compose([<br>    transforms.ToTensor(),<br>    transforms.Normalize((<span class="hljs-number">0.5</span>,), (<span class="hljs-number">0.5</span>,))<br>])<br><br>mnist_dataset = MNIST(root=<span class="hljs-string">&#x27;./data&#x27;</span>, train=<span class="hljs-literal">True</span>, transform=transform, download=<span class="hljs-literal">True</span>)<br>dataloader = DataLoader(mnist_dataset, batch_size=batch_size, shuffle=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 定义生成器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Generator</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Generator, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.model = nn.Sequential(<br>            nn.Linear(z_dimension, <span class="hljs-number">256</span>),<br>            nn.LeakyReLU(<span class="hljs-number">0.2</span>),<br>            nn.Linear(<span class="hljs-number">256</span>, <span class="hljs-number">512</span>),<br>            nn.LeakyReLU(<span class="hljs-number">0.2</span>),<br>            nn.Linear(<span class="hljs-number">512</span>, <span class="hljs-number">1024</span>),<br>            nn.LeakyReLU(<span class="hljs-number">0.2</span>),<br>            nn.Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">784</span>),<br>            nn.Tanh()<br>        )<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, z</span>):<br>        img = <span class="hljs-variable language_">self</span>.model(z)<br>        img = img.view(img.size(<span class="hljs-number">0</span>), <span class="hljs-number">1</span>, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>)<br>        <span class="hljs-keyword">return</span> img<br><br><span class="hljs-comment"># 定义判别器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Discriminator</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Discriminator, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.model = nn.Sequential(<br>            nn.Linear(<span class="hljs-number">784</span>, <span class="hljs-number">512</span>),<br>            nn.LeakyReLU(<span class="hljs-number">0.2</span>),<br>            nn.Linear(<span class="hljs-number">512</span>, <span class="hljs-number">256</span>),<br>            nn.LeakyReLU(<span class="hljs-number">0.2</span>),<br>            nn.Linear(<span class="hljs-number">256</span>, <span class="hljs-number">1</span>),<br>            nn.Sigmoid()<br>        )<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, img</span>):<br>        img_flat = img.view(img.size(<span class="hljs-number">0</span>), -<span class="hljs-number">1</span>)<br>        validity = <span class="hljs-variable language_">self</span>.model(img_flat)<br>        <span class="hljs-keyword">return</span> validity<br><br><span class="hljs-comment"># 初始化模型</span><br>generator = Generator().to(device)<br>discriminator = Discriminator().to(device)<br><br><span class="hljs-comment"># 损失函数和优化器</span><br>criterion = nn.BCELoss()<br>optimizer_G = optim.Adam(generator.parameters(), lr=learning_rate, betas=(<span class="hljs-number">0.5</span>, <span class="hljs-number">0.999</span>))<br>optimizer_D = optim.Adam(discriminator.parameters(), lr=learning_rate, betas=(<span class="hljs-number">0.5</span>, <span class="hljs-number">0.999</span>))<br><br><span class="hljs-comment"># 训练循环</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>    <span class="hljs-keyword">for</span> i, (real_imgs, _) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(dataloader):<br>        real_imgs = real_imgs.to(device)<br>        batch_size = real_imgs.size(<span class="hljs-number">0</span>)<br>        <br>        <span class="hljs-comment"># 创建标签</span><br>        real_label = torch.ones(batch_size, <span class="hljs-number">1</span>).to(device)<br>        fake_label = torch.zeros(batch_size, <span class="hljs-number">1</span>).to(device)<br>        <br>        <span class="hljs-comment"># 训练判别器</span><br>        optimizer_D.zero_grad()<br>        <br>        <span class="hljs-comment"># 真实图像的损失</span><br>        real_pred = discriminator(real_imgs)<br>        d_loss_real = criterion(real_pred, real_label)<br>        <br>        <span class="hljs-comment"># 生成假图像</span><br>        z = torch.randn(batch_size, z_dimension).to(device)<br>        fake_imgs = generator(z)<br>        <br>        <span class="hljs-comment"># 假图像的损失</span><br>        fake_pred = discriminator(fake_imgs.detach())<br>        d_loss_fake = criterion(fake_pred, fake_label)<br>        <br>        <span class="hljs-comment"># 总判别器损失</span><br>        d_loss = d_loss_real + d_loss_fake<br>        d_loss.backward()<br>        optimizer_D.step()<br>        <br>        <span class="hljs-comment"># 训练生成器</span><br>        optimizer_G.zero_grad()<br>        <br>        <span class="hljs-comment"># 生成器希望判别器将假图像判为真</span><br>        fake_pred = discriminator(fake_imgs)<br>        g_loss = criterion(fake_pred, real_label)<br>        <br>        g_loss.backward()<br>        optimizer_G.step()<br>        <br>        <span class="hljs-keyword">if</span> (i+<span class="hljs-number">1</span>) % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Epoch [<span class="hljs-subst">&#123;epoch+<span class="hljs-number">1</span>&#125;</span>/<span class="hljs-subst">&#123;num_epochs&#125;</span>], Step [<span class="hljs-subst">&#123;i+<span class="hljs-number">1</span>&#125;</span>/<span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(dataloader)&#125;</span>], &quot;</span><br>                  <span class="hljs-string">f&quot;D Loss: <span class="hljs-subst">&#123;d_loss.item():<span class="hljs-number">.4</span>f&#125;</span>, G Loss: <span class="hljs-subst">&#123;g_loss.item():<span class="hljs-number">.4</span>f&#125;</span>&quot;</span>)<br>    <br>    <span class="hljs-comment"># 每个epoch保存生成的图像</span><br>    <span class="hljs-keyword">if</span> (epoch+<span class="hljs-number">1</span>) % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">with</span> torch.no_grad():<br>            test_z = torch.randn(<span class="hljs-number">16</span>, z_dimension).to(device)<br>            generated_imgs = generator(test_z)<br>            generated_imgs = generated_imgs.cpu().numpy()<br>            <br>            <span class="hljs-comment"># 显示生成的图像</span><br>            fig, axes = plt.subplots(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>, figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">8</span>))<br>            <span class="hljs-keyword">for</span> i, ax <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(axes.flat):<br>                ax.imshow(generated_imgs[i, <span class="hljs-number">0</span>, :, :], cmap=<span class="hljs-string">&#x27;gray&#x27;</span>)<br>                ax.axis(<span class="hljs-string">&#x27;off&#x27;</span>)<br>            plt.savefig(<span class="hljs-string">f&quot;gan_epoch_<span class="hljs-subst">&#123;epoch+<span class="hljs-number">1</span>&#125;</span>.png&quot;</span>)<br>            plt.close()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Training finished!&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>生成对抗网络是深度学习领域最令人兴奋的发展之一，它们不仅推动了人工智能的边界，还为艺术创作、内容生成和数据增强等领域带来了革命性的变化。随着研究的不断深入，我们可以期待GAN在未来发挥更大的作用，创造出更加惊人的成果。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>Goodfellow, I., et al. (2014). Generative Adversarial Nets. NIPS.</li><li>Radford, A., et al. (2015). Unsupervised Representation Learning with Deep Convolutional Generative Adversarial Networks. arXiv:1511.06434.</li><li>Karras, T., et al. (2019). A Style-Based Generator Architecture for Generative Adversarial Networks. CVPR.</li><li>Zhu, J., et al. (2017). Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks. ICCV.</li></ol>]]></content>
    
    
    <categories>
      
      <category>DeepLearning</category>
      
      <category>AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DeepLearning</tag>
      
      <tag>Image</tag>
      
      <tag>AI</tag>
      
      <tag>Neural Networks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Introduction to Docker for Developers</title>
    <link href="/tech-blog/2025/03/14/Introduction-to-Docker-for-Developers/"/>
    <url>/tech-blog/2025/03/14/Introduction-to-Docker-for-Developers/</url>
    
    <content type="html"><![CDATA[<h2 id="What-is-Docker"><a href="#What-is-Docker" class="headerlink" title="What is Docker?"></a>What is Docker?</h2><p>Docker is a platform that enables developers to build, package, and run applications in containers. Containers are lightweight, portable, and self-sufficient environments that can run consistently across different computing environments. This makes Docker an essential tool for modern software development and deployment.</p><h2 id="Why-Use-Docker"><a href="#Why-Use-Docker" class="headerlink" title="Why Use Docker?"></a>Why Use Docker?</h2><p>As a developer, you might wonder why you should invest time in learning Docker. Here are some compelling reasons:</p><h3 id="1-Consistency-Across-Environments"><a href="#1-Consistency-Across-Environments" class="headerlink" title="1. Consistency Across Environments"></a>1. Consistency Across Environments</h3><p>One of the most common development issues is the “it works on my machine” problem. Docker solves this by packaging your application and its dependencies into a container that runs the same way everywhere.</p><h3 id="2-Isolation"><a href="#2-Isolation" class="headerlink" title="2. Isolation"></a>2. Isolation</h3><p>Containers provide isolation for your applications, ensuring that they don’t interfere with each other or with the host system. This makes it easier to run multiple applications with different dependencies on the same machine.</p><h3 id="3-Efficiency"><a href="#3-Efficiency" class="headerlink" title="3. Efficiency"></a>3. Efficiency</h3><p>Unlike virtual machines, Docker containers share the host system’s kernel, making them much more lightweight and efficient. They start up quickly and use fewer resources.</p><h3 id="4-Simplified-Configuration"><a href="#4-Simplified-Configuration" class="headerlink" title="4. Simplified Configuration"></a>4. Simplified Configuration</h3><p>Docker allows you to define your application’s environment and dependencies in code, making it easier to set up and reproduce development environments.</p><h2 id="Docker-Basics"><a href="#Docker-Basics" class="headerlink" title="Docker Basics"></a>Docker Basics</h2><p>Let’s dive into some Docker fundamentals that every developer should know.</p><h3 id="Docker-Images-and-Containers"><a href="#Docker-Images-and-Containers" class="headerlink" title="Docker Images and Containers"></a>Docker Images and Containers</h3><ul><li><strong>Docker Image</strong>: A read-only template that contains a set of instructions for creating a Docker container. Think of it as a snapshot of your application and its environment.</li><li><strong>Docker Container</strong>: A runnable instance of a Docker image. You can create, start, stop, move, or delete containers using the Docker API or CLI.</li></ul><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image. Here’s a simple example:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># Use an official Node.js runtime as a parent image</span><br><span class="hljs-keyword">FROM</span> node:<span class="hljs-number">14</span><br><br><span class="hljs-comment"># Set the working directory in the container</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /usr/src/app</span><br><br><span class="hljs-comment"># Copy package.json and package-lock.json</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> package*.json ./</span><br><br><span class="hljs-comment"># Install dependencies</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm install</span><br><br><span class="hljs-comment"># Copy the rest of the application</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . .</span><br><br><span class="hljs-comment"># Make port 3000 available outside the container</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">3000</span><br><br><span class="hljs-comment"># Define the command to run the application</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;npm&quot;</span>, <span class="hljs-string">&quot;start&quot;</span>]</span><br></code></pre></td></tr></table></figure><h3 id="Basic-Docker-Commands"><a href="#Basic-Docker-Commands" class="headerlink" title="Basic Docker Commands"></a>Basic Docker Commands</h3><p>Here are some essential Docker commands to get you started:</p><h4 id="Building-an-Image"><a href="#Building-an-Image" class="headerlink" title="Building an Image"></a>Building an Image</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t my-app .<br></code></pre></td></tr></table></figure><p>This command builds a Docker image from a Dockerfile in the current directory and tags it as “my-app”.</p><h4 id="Running-a-Container"><a href="#Running-a-Container" class="headerlink" title="Running a Container"></a>Running a Container</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -p 3000:3000 my-app<br></code></pre></td></tr></table></figure><p>This command runs a container from the “my-app” image and maps port 3000 in the container to port 3000 on the host.</p><h4 id="Listing-Containers"><a href="#Listing-Containers" class="headerlink" title="Listing Containers"></a>Listing Containers</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps<br></code></pre></td></tr></table></figure><p>This command lists all running containers. Add the <code>-a</code> flag to see all containers, including stopped ones.</p><h4 id="Stopping-a-Container"><a href="#Stopping-a-Container" class="headerlink" title="Stopping a Container"></a>Stopping a Container</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker stop &lt;container_id&gt;<br></code></pre></td></tr></table></figure><p>This command stops a running container.</p><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p>Docker Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application’s services, networks, and volumes.</p><p>Here’s a simple <code>docker-compose.yml</code> example for a web application with a database:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">web:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">.</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3000:3000&quot;</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">db</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">DATABASE_URL=postgres://postgres:password@db:5432/mydb</span><br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">postgres:13</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">postgres_data:/var/lib/postgresql/data</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">POSTGRES_PASSWORD=password</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">POSTGRES_DB=mydb</span><br><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">postgres_data:</span><br></code></pre></td></tr></table></figure><p>To start all services defined in the <code>docker-compose.yml</code> file, run:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose up<br></code></pre></td></tr></table></figure><h2 id="Best-Practices-for-Docker"><a href="#Best-Practices-for-Docker" class="headerlink" title="Best Practices for Docker"></a>Best Practices for Docker</h2><p>To make the most of Docker in your development workflow, consider these best practices:</p><h3 id="1-Keep-Images-Small"><a href="#1-Keep-Images-Small" class="headerlink" title="1. Keep Images Small"></a>1. Keep Images Small</h3><p>Use lightweight base images like Alpine Linux when possible. Remove unnecessary files and avoid installing packages you don’t need.</p><h3 id="2-Use-Multi-Stage-Builds"><a href="#2-Use-Multi-Stage-Builds" class="headerlink" title="2. Use Multi-Stage Builds"></a>2. Use Multi-Stage Builds</h3><p>Multi-stage builds allow you to use multiple FROM statements in your Dockerfile. Each FROM instruction can use a different base, and begins a new stage of the build. You can selectively copy artifacts from one stage to another, leaving behind everything you don’t need.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># Build stage</span><br><span class="hljs-keyword">FROM</span> node:<span class="hljs-number">14</span> AS build<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> package*.json ./</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm install</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . .</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm run build</span><br><br><span class="hljs-comment"># Production stage</span><br><span class="hljs-keyword">FROM</span> nginx:alpine<br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=build /app/build /usr/share/nginx/html</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;nginx&quot;</span>, <span class="hljs-string">&quot;-g&quot;</span>, <span class="hljs-string">&quot;daemon off;&quot;</span>]</span><br></code></pre></td></tr></table></figure><h3 id="3-Don’t-Run-as-Root"><a href="#3-Don’t-Run-as-Root" class="headerlink" title="3. Don’t Run as Root"></a>3. Don’t Run as Root</h3><p>For security reasons, it’s best to run your containers as a non-root user:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># Create a user and group</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> groupadd -r myuser &amp;&amp; useradd -r -g myuser myuser</span><br><br><span class="hljs-comment"># Set the user</span><br><span class="hljs-keyword">USER</span> myuser<br></code></pre></td></tr></table></figure><h3 id="4-Use-Environment-Variables"><a href="#4-Use-Environment-Variables" class="headerlink" title="4. Use Environment Variables"></a>4. Use Environment Variables</h3><p>Use environment variables for configuration that might change between environments:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># Set default environment variables</span><br><span class="hljs-keyword">ENV</span> NODE_ENV=production<br><span class="hljs-keyword">ENV</span> PORT=<span class="hljs-number">3000</span><br><br><span class="hljs-comment"># Use the environment variables</span><br><span class="hljs-keyword">EXPOSE</span> $PORT<br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;npm&quot;</span>, <span class="hljs-string">&quot;start&quot;</span>]</span><br></code></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Docker has revolutionized how developers build, ship, and run applications. By providing a consistent environment across development, testing, and production, Docker helps eliminate the “it works on my machine” problem and streamlines the development process.</p><p>In this post, we’ve covered the basics of Docker, including images, containers, Dockerfiles, and Docker Compose. We’ve also discussed some best practices to help you make the most of Docker in your development workflow.</p><p>As you continue your Docker journey, I encourage you to explore more advanced topics like Docker networking, volume management, and orchestration with Kubernetes.</p><p>Happy containerizing!</p>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
      <category>Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>DevOps</tag>
      
      <tag>Containers</tag>
      
      <tag>Backend</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
